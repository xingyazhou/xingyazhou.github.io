# -*- coding: utf-8 -*-
"""
Created on Tue Mar 12 11:06:23 2019

@author: xingya.zhou
"""

class Graph:
	def __init__(self,vertices):
		self.V=vertices
		self.graph=[]
		
	def addEdge(self,u,v,w):
		self.graph.append([u,v,w])
		
	def findParent(self,parent,i):
		if parent[i] == i:
			return i
		else:
			return self.findParent(parent,parent[i])
			
	def union(self, parent, u, v):
		x=self.findParent(parent,u)
		y=self.findParent(parent,v)
		
		parent[x]=y
		
	def mst(self):
		result= []		
		parent=[]		
		i=e=0
		
		self.graph.sort(key=lambda item:item[2])
		
		for node in range(self.V):
			parent.append(node)
					
		while e < self.V -1:
			u,v,w=self.graph[i]
			i+=1
			
			x=self.findParent(parent,u)
			y=self.findParent(parent,v)
			
			if x!=y:
				e+=1
				result.append([u,v,w])
				self.union(parent,u,v)
				
		print(result)
        
g = Graph(4) 
g.addEdge(0, 1, 10) 
g.addEdge(0, 2, 6) 
g.addEdge(0, 3, 5) 
g.addEdge(1, 3, 15) 
g.addEdge(2, 3, 4) 

g.mst() 
